@page "/Clients/Edit/{ID:int}"
@using BlazorApp.Models
@using System.Text.Json.Nodes

<div class="row">
	<div class="col-lg-8">
		<h1 class="mb-5">Edit Client</h1>
		@if(client == null){
			<p><em>Loading...</em></p>
		}
		else{
			<div class="mb-3">
				<label class="col-md-4 col-form-label">Client ID</label>
				<div class="col-md-8">
					<input class="form-control-plaintext" value="@Id" readonly>
				</div>
			</div>

			<div class="mb-3">
				<label class="col-md-4 col-form-label">First Name</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.FirstName">
					<span class="text-danger">@Errors["FirstName"]?[0]</span>
				</div>
			</div>

			<div class="mb-3">
				<label class="col-md-4 col-form-label">Last Name</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.LastName">
					<span class="text-danger">@Errors["LastName"]?[0]</span>
				</div>
			</div>

			<div class="mb-3">
				<label class="col-md-4 col-form-label">Email</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.Email">
					<span class="text-danger">@Errors["Email"]?[0]</span>
				</div>
			</div>

			<div class="mb-3">
				<label class="col-md-4 col-form-label">Phone</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.Phone">
					<span class="text-danger">@Errors["Phone"]?[0]</span>
				</div>
			</div>

			<div class="mb-3">
				<label class="col-md-4 col-form-label">Address</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.Address">
					<span class="text-danger">@Errors["Address"]?[0]</span>
				</div>
			</div>

			<div class="mb-3">
				<label class="col-md-4 col-form-label">Status</label>
				<div class="col-md-8">
					<select class="form-select" @bind="ClientData.Status">
						<option value='New'>New</option>
						<option value='Permanent'>Permanent</option>
						<option value='Lead'>Lead</option>
						<option value='Occasional'>Occasional</option>
						<option value='Inactive'>Inactive</option>
					</select>
					<span class="text-danger">@Errors["Status"]?[0]</span>
				</div>
			</div>
			<div class="row">
				<div class="offset-md-4 col-md-4 d-grid">
					<button class="btn btn-primary" @onclick="SaveClient"> Submit</button>
				</div>
				<div class="col-md-4 d-grid">
					<button class="btn btn-outline-primary" href="/Clients"> Cancel</button>
				</div>
			</div>
		}
	</div>
</div>


@inject HttpClient Http
@inject NavigationManager navManager


@code {
	[Parameter]
	public int Id { set; get; }
	public Client? client = null;
	public ClientDto ClientData { set; get; } = new();
	public JsonNode Errors { set; get; } = new JsonObject();

	protected override async Task OnParametersSetAsync(){
		try{
			client = await Http.GetFromJsonAsync<Client>("https://localhost:4000/api/Clients/" + Id);
			ClientData.FirstName = client?.FirstName ?? "";
			ClientData.LastName  = client?.LastName ?? "";
			ClientData.Email = client?.Email ?? "";
			ClientData.Phone = client?.Phone ?? "";
			ClientData.Address = client?.Address ?? "";
		}
		catch(Exception ex){
			Console.WriteLine("Exception : " + ex.Message);
		}
	}

	protected async Task SaveClient()
	{
		var response = await Http.PutAsJsonAsync("https://localhost:4000/api/Clients/" + Id, ClientData);
		if (response.IsSuccessStatusCode)
		{
			// redirect to list of clients
			navManager.NavigateTo("/Clients");
		}
		else
		{
			var strResponse = await response.Content.ReadAsStringAsync();
			try
			{
				var jsonResponse = JsonNode.Parse(strResponse);
				Errors = jsonResponse?["errors"] ?? new JsonObject();
			}
			catch (Exception)
			{
			}
		}
	}

}